/*
 * Copyright 2020 Toshiki Iga
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jp.igapyon.md2tagmd;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.apache.commons.io.FileUtils;

/**
 * 入力で与えられたディレクトリ以下の Wiki mdファイルを入力に Indexファイルなどを生成します。
 * 
 * @author Toshiki Iga
 */
public class Md2TagMd {
    private File inputdir = null;
    private File outputdir = null;

    public Md2TagMd(File inputdir, File outputdir) {
        this.inputdir = inputdir;
        this.outputdir = outputdir;
    }

    /**
     * 処理のエントリポイント
     * 
     * @throws IOException 入出力例外が発生した場合。
     */
    public void process() throws IOException {
        List<Md2TagMdBean> beanList = loadDir(inputdir);

        processIndex(beanList);

        processTags(beanList);
    }

    protected void processIndex(List<Md2TagMdBean> beanList) throws IOException {
        StringBuilder builder = new StringBuilder();
        builder.append("# Wiki インデックス\n" //
                + "\n" //
                + "**Tag**: AutoGenerated\n"//
                + "\n" //
                + "自動的に生成された Wiki のインデックスです。\n" //
                + "\n" //
                + "| Wiki Name | Title       | Tag      |\n" //
                + "| --------- | ----------- | -------- |\n");

        for (Md2TagMdBean bean : beanList) {
            builder.append("| [[" + bean.getName() + "]] | " + bean.getTitle() + " | " + bean.getTags() + " |\n");
        }

        if (outputdir.exists() == false) {
            outputdir.mkdirs();
        }

        System.err.println("generate: Index.md");
        FileUtils.write(new File(outputdir, "Index.md"), builder.toString(), "UTF-8");
    }

    protected void processTags(List<Md2TagMdBean> beanList) throws IOException {
        // そもそものタグ一覧の作成
        List<String> tagList = new ArrayList<>();
        for (Md2TagMdBean bean : beanList) {
            for (String tag : bean.getTagList()) {
                boolean isExists = false;
                for (String existingtag : tagList) {
                    if (existingtag.equalsIgnoreCase(tag)) {
                        // すでにある
                        isExists = true;
                        break;
                    }
                }
                if (isExists == false) {
                    tagList.add(tag);
                }
            }
        }

        // タグをソート
        Collections.sort(tagList, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return o1.compareTo(o2);
            }
        });

        // タグごとに紐づく Wiki を検索
        for (String tag : tagList) {
            List<Md2TagMdBean> memberBeanList = new ArrayList<>();

            for (Md2TagMdBean bean : beanList) {
                for (String check : bean.getTagList()) {
                    if (tag.equalsIgnoreCase(check)) {
                        memberBeanList.add(bean);
                        break;
                    }
                }
            }

            processTag(tag, memberBeanList);
        }
    }

    protected void processTag(String tagName, List<Md2TagMdBean> memberBeanList) throws IOException {
        StringBuilder builder = new StringBuilder();
        builder.append("# " + tagName + " カテゴリ\n" //
                + "\n" //
                + "**Tag**: AutoGenerated\n"//
                + "\n" //
                + "自動的に生成された Wiki のカテゴリページです。\n" //
                + "\n" //
                + "| Wiki Name | Title       | Tag      |\n" //
                + "| --------- | ----------- | -------- |\n");

        for (Md2TagMdBean bean : memberBeanList) {
            builder.append("| [[" + bean.getName() + "]] | " + bean.getTitle() + " | " + bean.getTags() + " |\n");
        }

        if (outputdir.exists() == false) {
            outputdir.mkdirs();
        }

        System.err.println("generate: Tag_" + tagName + ".md");
        FileUtils.write(new File(outputdir, "Tag_" + tagName + ".md"), builder.toString(), "UTF-8");
    }

    /**
     * ディレクトリの内容をロードします。
     * 
     * @return ロード済み内容。
     * @throws IOException
     */
    public static List<Md2TagMdBean> loadDir(File inputdir) throws IOException {
        List<Md2TagMdBean> result = new ArrayList<>();

        List<File> fileList = Md2TagMdUtil.getFileList(inputdir);
        for (File file : fileList) {
            Md2TagMdBean bean = new Md2TagMdBean();
            result.add(bean);

            bean.setName(file.getName().substring(0, file.getName().length() - ".md".length()));
            bean.setTitle("noname");

            String[] contents = FileUtils.readFileToString(file, "UTF-8").split("\n");
            boolean isTitleFound = false;
            boolean isTagFound = false;
            for (String line : contents) {
                if (isTitleFound == false) {
                    if (line.startsWith("#")) {
                        bean.setTitle(line.substring(1).trim());
                        isTitleFound = true;
                    }
                }
                if (isTagFound == false) {
                    if (line.toLowerCase().startsWith("**tag**:")) {
                        bean.setTags(line.substring("**tag**:".length()).trim());
                        isTagFound = true;
                    }
                    if (line.toLowerCase().startsWith("tag:")) {
                        bean.setTags(line.substring("tag:".length()).trim());
                        isTagFound = true;
                    }
                }
            }
        }

        return result;
    }
}
